name: Release Notes to Confluence Publisher
author: Gershon Alvais
description: Confluence Release BOT. This action will create a release page in confluence with the release notes.
branding:
  icon: "book"
  color: "blue"

inputs:
  # Confluence configs
  spaceId:
    description: Confluence space id. This is the space where the release page will be created.
    required: true
    type: string
  status:
    required: true
    type: string
  title:
    description: Title of the page.  Release tag.
    required: true
    type: string
  parentId:
    description: Parent page id. The release page will be created under this page.
    required: true
    type: string
  ConfluenceBaseUrl:
    description: Confluence base url
    required: true
    type: string
  ConfluenceSpaceKey:
    description: Confluence space key
    type: string
  # Release notes
  tag:
    required: true
    type: string
  confluence_email:
    description: "Confluence Email"
    required: true
    type: string
  confluence_api_token:
    description: "Confluence API Token"
    required: true
    type: string
  appName:
    Description: Name of the app. This will be used in the release notes.
    required: true
    type: string
  repoOwner:
    Description: Owner of the repository. This will be used to fetch the release notes.
    required: true
    type: string
  repoName:
    Description: Name of the repository. This will be used to fetch the release notes.
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get Release
      id: get-release
      uses: actions/github-script@v7
      with:
        script: |
          const tag = '${{ inputs.tag }}';
          const release = await github.rest.repos.getReleaseByTag({
            owner: '${{ inputs.repoOwner }}',
            repo: '${{ inputs.repoName }}',
            tag: tag
          });
          if (!release || !release.data.body) {
              console.error('Invalid release');
              return;
          }
          console.log(release.data.body);
          return {
              body: release.data.body,
              url: `https://github.com/${{ inputs.repoOwner }}/${{ inputs.repoName }}/releases/tag/${tag}`
          };

    - name: Post Release Notes to Confluence
      id: post_to_confluence
      shell: bash
      env:
        RELEASE_NOTES: ${{ fromJSON(steps.get-release.outputs.result).body }}
        RELEASE_URL: ${{ fromJSON(steps.get-release.outputs.result).url }}
      run: |
        # Predchádzajúce kroky ...

        # Step 1: Get existing page content (using your pageId)
        existing_page_id="${{ inputs.existingPageId }}"
        existing_page_response=$(curl --request GET \
            --url "${{ inputs.ConfluenceBaseUrl }}/wiki/api/v2/pages/${existing_page_id}" \
            --user "${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}" \
            --header 'Accept: application/json')

        # Extract the current content of the page
        existing_content=$(echo "$existing_page_response" | jq -r '.body.storage.value')

        # Add additional line before the content
        RELEASE_NOTES="Release [${{ inputs.tag }}](${RELEASE_URL}) $(date)\n\n${RELEASE_NOTES}"

        # Combine existing content with new release notes
        # Add the new content above the existing content
        new_content="$RELEASE_NOTES\n\n$existing_content"

        # Prepare the payload for update
        payload=$(jq -n \
        --arg value "$new_content" \
        --arg version "$(echo "$existing_page_response" | jq -r '.version.number + 1')" \
        --arg title "Release: ${{ inputs.tag }}" \
        '{
            "version": {
                "number": ($version | tonumber)
            },
            "title": $title,
            "type": "page",
            "body": {
                "storage": {
                    "value": $value,
                    "representation": "storage"
                }
            }
        }')

        # Step 3: Update the existing page with new content
        update_response=$(curl --request PUT \
            --url "${{ inputs.ConfluenceBaseUrl }}/wiki/api/v2/pages/${existing_page_id}" \
            --user "${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}" \
            --header 'Accept: application/json' \
            --header 'Content-Type: application/json' \
            --data "$payload")

        echo "Update Response: $update_response"
