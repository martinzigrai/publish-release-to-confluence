name: Release Notes to Confluence Publisher
author: Gershon Alvais
description: Confluence Release BOT. This action will create a release page in Confluence with the release notes.
branding:
  icon: "book"
  color: "blue"

inputs:
  spaceId:
    description: Confluence space id. This is the space where the release page will be created.
    required: true
    type: string
  status:
    required: true
    type: string
  title:
    description: Title of the page. Release tag.
    required: true
    type: string
  parentId:
    description: Parent page id. The release page will be created under this page.
    required: true
    type: string
  ConfluenceBaseUrl:
    description: Confluence base url
    required: true
    type: string
  ConfluenceSpaceKey:
    description: Confluence space key
    type: string
  tag: 
    required: true
    type: string
  confluence_email:
    description: "Confluence Email"
    required: true
    type: string
  github_api_token:
    description: "Github API Token"
    required: false
    type: string
  confluence_api_token:
    description: "Confluence API Token"
    required: true
    type: string
  appName:
    description: Name of the app. This will be used in the release notes.
    required: true
    type: string
  repoOwner:
    description: Owner of the repository. This will be used to fetch the release notes.
    required: true
    type: string
  repoName:
    description: Name of the repository. This will be used to fetch the release notes.
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get CHANGELOG
      id: get-changelog
      uses: actions/github-script@v7
      with:
        script: |
          const repoOwner = '${{ inputs.repoOwner }}'; 
          const repoName = '${{ inputs.repoName }}'; 
          const branch = 'main'; // Specify your branch name here

          const { data: fileInfo } = await github.rest.repos.getContent({
            owner: repoOwner,
            repo: repoName,
            path: 'CHANGELOG.md',
            ref: branch
          });

          const changelogContent = Buffer.from(fileInfo.content, 'base64').toString('utf-8');
          console.log(changelogContent);

          core.setOutput("changelogContent", changelogContent);

          return { changelogContent };
          


    - name: Install pandoc
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc

    - name: Create or Update Release Notes Page in Confluence
      id: create_or_update_confluence_page
      shell: bash
      env:
        RELEASE_NOTES: ${{ steps.get-changelog.outputs.changelogContent }}
        RELEASE_URL: "https://github.com/${{ inputs.repoOwner }}/${{ inputs.repoName }}/blob/main/CHANGELOG.md"

      run: |
        echo "RELEASE_NOTES content:"
        echo "${RELEASE_NOTES}"


        echo "Changelog content from previous step:"
        echo "${RELEASE_NOTES}"

        parent_id="${{ inputs.parentId }}"

        # Get existing page content
        existing_page_response=$(curl --request GET \
          --url "${{ inputs.ConfluenceBaseUrl }}/rest/api/content/${parent_id}?expand=body.storage,version" \
          --user "${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}" \
          --header 'Accept: application/json' \
          --silent)

        existing_content=$(echo "$existing_page_response" | jq -r '.body.storage.value // ""')
        existing_version=$(echo "$existing_page_response" | jq -r '.version.number')

        # Convert Markdown to HTML (requires pandoc installed)
        RELEASE_NOTES=$(echo "$RELEASE_NOTES" | pandoc -f markdown -t html)

        # Combine existing content with new changelog
        if [[ -n "$existing_content" ]]; then
          combined_content="$existing_content<br><br>$RELEASE_NOTES"
        else
          combined_content="$RELEASE_NOTES"
        fi

        # Increment version number
        new_version=$((existing_version + 1))

        # Create updated payload
        payload=$(jq -n \
            --arg value "$combined_content" \
            --arg version "$new_version" \
            --arg title "${{ inputs.title }}" \
            '{
                "version": { "number": ($version | tonumber) },
                "title": $title,
                "type": "page",
                "body": {
                    "storage": {
                        "value": $value,
                        "representation": "storage"
                    }
                }
            }')

        # Update existing page with new content
        update_response=$(curl --request PUT \
          --url "${{ inputs.ConfluenceBaseUrl }}/rest/api/content/${parent_id}" \
          --user "${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}" \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --data "$payload")

        # Check for errors in the update response
        if [[ $(echo "$update_response" | jq -r '.statusCode // empty') ]]; then
          error_message=$(echo "$update_response" | jq -r '.message // "No error message"')
          echo "Error updating Confluence page: $error_message"
          exit 1
        fi