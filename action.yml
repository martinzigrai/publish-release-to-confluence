name: Release Notes to Confluence Publisher
author: Gershon Alvais
description: Confluence Release BOT. This action will create a release page in Confluence with the release notes.
branding:
  icon: "book"
  color: "blue"

inputs:
  # Confluence configs
  spaceId:
    description: Confluence space id. This is the space where the release page will be created.
    required: true
    type: string
  status:
    required: true
    type: string
  title:
    description: Title of the page. Release tag.
    required: true
    type: string
  parentId:
    description: Parent page id. The release page will be created under this page.
    required: true
    type: string
  ConfluenceBaseUrl:
    description: Confluence base url
    required: true
    type: string
  ConfluenceSpaceKey:
    description: Confluence space key
    type: string
  # Release notes
  tag:
    required: true
    type: string
  confluence_email:
    description: "Confluence Email"
    required: true
    type: string
  confluence_api_token:
    description: "Confluence API Token"
    required: true
    type: string
  appName:
    description: Name of the app. This will be used in the release notes.
    required: true
    type: string
  repoOwner:
    description: Owner of the repository. This will be used to fetch the release notes.
    required: true
    type: string
  repoName:
    description: Name of the repository. This will be used to fetch the release notes.
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Get Changelog
      id: get-changelog
      uses: actions/github-script@v7
      with:
        script: |
          const repoOwner = '${{ inputs.repoOwner }}'; 
          const repoName = '${{ inputs.repoName }}'; 

          if (!repoOwner || !repoName) {
            throw new Error('Repository owner and name must be provided.');
          }

          // Fetch the contents of changelog.md to get its SHA
          const { data: fileInfo } = await github.rest.repos.getContent({
            owner: repoOwner,
            repo: repoName,
            path: 'changelog.md'
          });

          // Use the SHA to get the raw content from the Blob API
          const { data: blobData } = await github.rest.git.getBlob({
            owner: repoOwner,
            repo: repoName,
            blob_sha: fileInfo.sha
          });

          // Decode the blob content from base64
          const changelogContent = Buffer.from(blobData.content, 'base64').toString('utf-8');

          console.log(changelogContent);
          return {
            body: changelogContent,
            url: `https://github.com/${repoOwner}/${repoName}/blob/main/changelog.md`
          };



    - name: Create or Update Release Notes Page in Confluence
      id: create_or_update_confluence_page
      shell: bash
      env:
        RELEASE_NOTES: ${{ steps.get-changelog.outputs.body }}
        RELEASE_URL: ${{ steps.get-changelog.outputs.url }}
      run: |
        parent_id="${{ inputs.parentId }}"
        echo "Parent Page ID: $parent_id"  # Log parent page ID

        # Get existing page content
        existing_page_response=$(curl --request GET \
          --url "${{ inputs.ConfluenceBaseUrl }}/rest/api/content/${parent_id}?expand=body.storage,version" \
          --user "${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}" \
          --header 'Accept: application/json' \
          --silent)

        # Extract existing content and version
        existing_content=$(echo "$existing_page_response" | jq -r '.body.storage.value // ""')
        existing_version=$(echo "$existing_page_response" | jq -r '.version.number')

        # Print the existing content and version
        echo "Existing content:"
        echo "$existing_content"
        echo "Existing version: $existing_version"

        # Combine existing content with new changelog
        # Adding a header for the release
        RELEASE_NOTES="### Release [${{ inputs.tag }}](${RELEASE_URL}) $(date)<br><br>${RELEASE_NOTES}"
        if [[ -n "$existing_content" ]]; then
          combined_content="$existing_content<br><br>$RELEASE_NOTES"
        else
          combined_content="$RELEASE_NOTES"
        fi

        # Increment version number
        new_version=$((existing_version + 1))

        # Create updated payload
        payload=$(jq -n \
            --arg value "$combined_content" \
            --arg version "$new_version" \
            --arg title "${{ inputs.title }}" \
            '{
                "version": {
                    "number": ($version | tonumber)
                },
                "title": $title,
                "type": "page",
                "body": {
                    "storage": {
                        "value": $value,
                        "representation": "storage"
                    }
                }
            }')

        echo "Payload: $payload"  # Log payload

        # Update existing page with new content
        update_response=$(curl --request PUT \
        --url "${{ inputs.ConfluenceBaseUrl }}/rest/api/content/${parent_id}" \
        --user "${{ inputs.confluence_email }}:${{ inputs.confluence_api_token }}" \
        --header 'Accept: application/json' \
        --header 'Content-Type: application/json' \
        --data "$payload")

        echo "Update Response: $update_response"  # Log update response
